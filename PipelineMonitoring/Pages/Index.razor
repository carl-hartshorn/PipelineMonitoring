@page "/"
@inject BuildsClient BuildsClient
@inject ReleasesClient ReleasesClient
@inject LocalStorageService LocalStorageService
@inject AzureDevOpsSettingsService AzureDevOpsSettingsService
@inject PersonalAccessTokenService PersonalAccessTokenService
@inject EventService EventService
@implements IDisposable
@using PipelineMonitoring.AzureDevOps.Builds
@using PipelineMonitoring.AzureDevOps.Releases

<div class="row">
    <div class="col-12 col-md-6">
        <Refresher RefreshAction="@FetchBuildsAndReleases" />
    </div>
    <div class="col-12 col-md-6">
        <Filter FilterCriteria="@FilterCriteria" FilterLabel="Only Broken or In Progress" />
    </div>
</div>

@if (_errorFetching)
{
    <Error PipelineEntityPlural="builds and releases" />
}
else if (!AzureDevOpsSettingsService.HasOrganisationAndProject)
{
    <AzureDevOpsSettingsRequired />
}
else if (_builds == null || _releases == null)
{
    <div class="text-center">
        <div class="spinner-border text-light" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else if (!_builds.Any() && !_releases.Any())
{
    <p class="text-center">All green 🎉</p>
}
else
{
    <div class="@(!_builds.Any() || !_releases.Any() ? "container" : string.Empty)">
        <div class="row">
            @if (_builds.Any())
            {
                <div class="@(_releases.Any() ? "col-md-6" : "col-md-12")">
                    <div class="text-center mb-4">
                        🛠️
                    </div>
                    <BuildsList Builds="@_builds" />
                </div>
            }

            @if (_releases.Any())
            {
                <div class="@(_builds.Any() ? "col-md-6" : "col-md-12")">
                    <div class="text-center mb-4">
                        🚀
                    </div>
                    <ReleasesList Releases="@_releases" />
                </div>
            }
        </div>
    </div>
}

@code {
    Build[]? _builds;
    Release[]? _releases;
    EventHandler<PersonalAccessTokenEventArgs>? _personalAccessTokenEventHandler;
    EventHandler<FilterEventArgs>? _filterEventHandler;
    bool _errorFetching;

    FilterCriteria FilterCriteria { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await AzureDevOpsSettingsService.InitialiseFromLocalStorage();
        await PersonalAccessTokenService.InitialiseFromLocalStorage();
        FilterCriteria = await FilterCriteria.LoadFromLocalStorage(LocalStorageService);

        _personalAccessTokenEventHandler = async (_, _) => await FetchBuildsAndReleases();
        
        _filterEventHandler = async (_, _) =>
        {
            await FilterCriteria.StoreToLocalStorage(LocalStorageService);
            await FetchBuildsAndReleases();
        };

        PersonalAccessTokenService.PersonalAccessTokenChanged += _personalAccessTokenEventHandler;
        EventService.FilterChanged += _filterEventHandler;

        await FetchBuildsAndReleases();
    }

    public void Dispose()
    {
        PersonalAccessTokenService.PersonalAccessTokenChanged -= _personalAccessTokenEventHandler;
        EventService.FilterChanged -= _filterEventHandler;
    }

    async Task FetchBuildsAndReleases()
    {
        _builds = null;
        _releases = null;
        _errorFetching = false;
        StateHasChanged();

        if (AzureDevOpsSettingsService.HasOrganisationAndProject)
        {
            try
            {
                _builds = await BuildsClient.GetBuilds(FilterCriteria);
                _releases = await ReleasesClient.GetReleases(FilterCriteria);
            }
            catch
            {
                _errorFetching = true;
            }
        }

        StateHasChanged();
    }
}
