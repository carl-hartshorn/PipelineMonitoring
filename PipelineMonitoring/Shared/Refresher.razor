@using System.Threading;
@implements IDisposable
@inject LocalStorageService LocalStorageService

<div class="form-inline mb-4">
    <label for="refresh-interval-selector" class="mr-2 d-none d-lg-inline-block">Refresh every</label>
    <div class="input-group">
        <select id="refresh-interval-selector" class="form-control" @bind="RefreshEvery">
            <option value="@RefreshInterval.None">None</option>
            <option value="@RefreshInterval.OneMinute">Minute</option>
            <option value="@RefreshInterval.FiveMinutes">Five minutes</option>
        </select>
        <div class="input-group-append">
            <button class="btn btn-secondary" @onclick="Refresh">Refresh now</button>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public Func<Task> RefreshAction { get; set; } = () => Task.CompletedTask;

    [Parameter]
    public string LocalStorageKeyPrefix { get; set; } = string.Empty;

    private const string LocalStorageKey = "RefreshInterval";

    private RefreshInterval _refreshEvery = RefreshInterval.FiveMinutes;
    RefreshInterval RefreshEvery
    {
        get => _refreshEvery;
        set
        {
            _refreshEvery = value;
            RestartTimer();

            LocalStorageService.SetItem(LocalStorageKey, _refreshEvery.ToString()).Wait();
        }
    }

    Timer? _timer;

    protected override async Task OnInitializedAsync()
    {
        var persistedRefreshInterval = await LocalStorageService.GetItem(LocalStorageKey);

        if (!string.IsNullOrWhiteSpace(persistedRefreshInterval))
        {
            _refreshEvery = (RefreshInterval)Enum.Parse(typeof(RefreshInterval), persistedRefreshInterval);
        }

        var refreshMilliseconds = MillisecondsFrom(_refreshEvery);

        _timer = new Timer(
            _ => RefreshAction(),
            null,
            refreshMilliseconds,
            refreshMilliseconds);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    public async Task Refresh()
    {
        RestartTimer();
        await RefreshAction();
    }

    void RestartTimer()
    {
        var refreshMilliseconds = MillisecondsFrom(_refreshEvery);
        _timer?.Change(refreshMilliseconds, refreshMilliseconds);
    }

    int MillisecondsFrom(RefreshInterval refreshInterval)
    {
        return refreshInterval switch
        {
            RefreshInterval.None => Timeout.Infinite,
            RefreshInterval.OneMinute => 60000,
            RefreshInterval.FiveMinutes => 300000,
            _ => Timeout.Infinite
        };
    }

    enum RefreshInterval
    {
        None = 0,
        OneMinute = 1,
        FiveMinutes = 2
    }
}